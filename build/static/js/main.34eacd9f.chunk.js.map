{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["socket","ENDPOINT","App","state","count","amount","value","message","color","socketInit","io","on","data","console","log","setState","doIncrement","Bidding","emit","val","this","new","className","key","isPlaying","durationSeconds","colors","onClick","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"+MAIIA,E,kHACEC,EAAW,+CA+EFC,E,2MA5EbC,MAAQ,CACNC,MAAO,GACPC,OAAQ,GACRC,MAAO,EACPC,QAAS,KACTC,MAAO,W,EAWTC,WAAa,YACXT,EAASU,IAAGT,IACLU,GAAG,aAAa,SAACC,GACtBC,QAAQC,IAAIF,GACZ,EAAKG,SAAS,CACZX,MAAOQ,EAAKR,Y,EAgBlBY,YAAc,WACR,EAAKb,MAAMG,MAAQ,KACrB,EAAKS,SAAS,CACZT,MAAO,EAAKH,MAAMG,MAAQ,GAC1BC,QAAS,KACTC,MAAO,YAETK,QAAQC,IAAI,EAAKX,MAAMG,QAGvB,EAAKS,SAAS,CACZR,QAAS,+CAGb,EAAKU,W,EAEPA,QAAU,WACRjB,EAAOkB,KAAK,OAAQ,CAAEC,IAAK,EAAKhB,MAAMG,MAAQ,GAAIE,MAAO,a,mFA/CtC,IAAD,OAClBY,KAAKX,aACLT,EAAOW,GAAG,WAAW,SAACC,GACpB,EAAKG,SAAS,CACZT,MAAOM,EAAKS,IACZb,MAAOI,EAAKJ,a,+BA8ChB,OADAK,QAAQC,IAAIM,KAAKjB,OAEf,yBAAKmB,UAAU,OACb,2CAAiBF,KAAKjB,MAAMC,OAC5B,kBAAC,uBAAD,CACEmB,IAAKH,KAAKjB,MAAMG,MAChBkB,WAAS,EACTC,gBAAiB,EACjBC,OAAQ,CACN,CAAC,GAAD,OAAIN,KAAKjB,MAAMK,OAAS,MAG5B,iDAAuBY,KAAKjB,MAAMG,OAClC,4BAAQgB,UAAU,2BAA2BK,QAASP,KAAKJ,aAA3D,Y,GAvEUY,IAAMC,WCKJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.34eacd9f.chunk.js","sourcesContent":["import React from 'react';\nimport io from 'socket.io-client';\nimport './App.css';\nimport { CountdownCircleTimer } from 'react-countdown-circle-timer';\nlet socket;\nconst ENDPOINT = 'http://real-time-bidding-demo.herokuapp.com/';\n\nclass App extends React.Component {\n  state = {\n    count: '',\n    amount: '',\n    value: 0,\n    message: null,\n    color: \"#0000FF\"\n  }\n  componentDidMount() {\n    this.socketInit();\n    socket.on(\"newData\", (data) => {\n      this.setState({\n        value: data.new,\n        color: data.color\n      })\n    })\n  }\n  socketInit = () => {\n    socket = io(ENDPOINT);\n    socket.on('userCount', (data) => {\n      console.log(data);\n      this.setState({\n        count: data.count\n      })\n    })\n  }\n  // doDecrement = () => {\n  //   if (this.state.value) {\n  //     this.setState({\n  //       value: this.state.value - 1,\n  //       message: null\n  //     });\n  //   } else {\n  //     this.setState({\n  //       message: \"Can't decrement. Since 0 is the min value\"\n  //     });\n  //   }\n  // }\n  doIncrement = () => {\n    if (this.state.value < 1000) {\n      this.setState({\n        value: this.state.value + 25,\n        message: null,\n        color: '#004c00'\n      });\n      console.log(this.state.value);\n\n    } else {\n      this.setState({\n        message: \"Can't increment. Since 10 is the max value\"\n      });\n    }\n    this.Bidding();\n  }\n  Bidding = () => {\n    socket.emit(\"data\", { val: this.state.value + 25, color: \"#FF0000\" });\n  }\n  render() {\n    console.log(this.state);\n    return (\n      <div className=\"App\">\n        <h3>User Count :{this.state.count}</h3>\n        <CountdownCircleTimer\n          key={this.state.value}\n          isPlaying\n          durationSeconds={5}\n          colors={[\n            [`${this.state.color}`, 1]\n          ]}\n        />\n        <h3> Bidding Amount : {this.state.value}</h3>\n        <button className=\"btn btn-danger px-4 mt-4\" onClick={this.doIncrement} >BID</button>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}